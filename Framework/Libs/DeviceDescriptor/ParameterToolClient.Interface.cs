//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace ParameterTool.NSwagClass.Generator.Interface
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IParameterToolClient
    {
        /// <summary>
        /// Returns a zip file with the protocol translation list
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="protocolId">A protocol identifier</param>
        /// <returns>Translation list was generated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CodeGeneration_GetParameterTranslationListAsync(int deviceId, int protocolId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a zip file with the protocol translation list
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="protocolId">A protocol identifier</param>
        /// <returns>Translation list was generated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CodeGeneration_GetParameterTranslationListAsync(int deviceId, int protocolId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a ZIP with a source code file containing all internal parameter indinces required by a specific Device
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CodeGeneration_GetInternalIndicesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a ZIP with a source code file containing all internal parameter indinces required by a specific Device
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CodeGeneration_GetInternalIndicesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a string in the response body with a parameterProperties file for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>ParameterProperties file was generated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CodeGeneration_GetParameterPropertiesAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a string in the response body with a parameterProperties file for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>ParameterProperties file was generated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CodeGeneration_GetParameterPropertiesAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all generated source files at once in form of a zip file
        /// </summary>
        /// <returns>Zip file with all source files generated with success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CodeGeneration_GetDeviceSourceCodeFilesAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all generated source files at once in form of a zip file
        /// </summary>
        /// <returns>Zip file with all source files generated with success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> CodeGeneration_GetDeviceSourceCodeFilesAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves all existing datatypes in the database
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataTypeReponse>> DataType_GetAllDataTypesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves all existing datatypes in the database
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataTypeReponse>> DataType_GetAllDataTypesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new datatype
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DataType_CreateDatatypeAsync(string dataTypesName, int? dataTypeLenght);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new datatype
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DataType_CreateDatatypeAsync(string dataTypesName, int? dataTypeLenght, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DataType_UpdateDataTypeAsync(DataTypeReponse body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DataType_UpdateDataTypeAsync(DataTypeReponse body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DataType_DeleteDataTypeAsync(int dataTypeId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DataType_DeleteDataTypeAsync(int dataTypeId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetDevicesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetDevicesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves Device information for the given device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>Device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeviceResponse> Device_GetDevicesByIdAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves Device information for the given device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>Device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeviceResponse> Device_GetDevicesByIdAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all the existing parameters for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="roleId">A role identifier</param>
        /// <param name="protocolId">A protocol identifier</param>
        /// <param name="parameterId">A parameter identifier</param>
        /// <returns>Parameters for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ParameterDetailsResponse>> Device_GetParametersByDeviceAsync(int deviceId, int? roleId, int? protocolId, int? parameterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all the existing parameters for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="roleId">A role identifier</param>
        /// <param name="protocolId">A protocol identifier</param>
        /// <param name="parameterId">A parameter identifier</param>
        /// <returns>Parameters for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ParameterDetailsResponse>> Device_GetParametersByDeviceAsync(int deviceId, int? roleId, int? protocolId, int? parameterId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all the existing parameters for a device Front-end only, do not use this.
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="connectionId">SignalR identifier</param>
        /// <returns>Parameters for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ParameterDetailsResponseFront>> Device_GetParametersByDevice_FrontEndOnlyAsync(int deviceId, string connectionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all the existing parameters for a device Front-end only, do not use this.
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="connectionId">SignalR identifier</param>
        /// <returns>Parameters for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ParameterDetailsResponseFront>> Device_GetParametersByDevice_FrontEndOnlyAsync(int deviceId, string connectionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all the existing parameters for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="parameterId">A parameter identifier</param>
        /// <returns>Parameters for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParameterDetailsResponse> Device_GetParameterByDeviceAndByIdAsync(int deviceId, int? parameterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all the existing parameters for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="parameterId">A parameter identifier</param>
        /// <returns>Parameters for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParameterDetailsResponse> Device_GetParameterByDeviceAndByIdAsync(int deviceId, int? parameterId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_ExportSPDfileAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_ExportSPDfileAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all the existing named variables for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>Named variables for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceNamedVariables>> Device_GetNamedVariablesByDeviceAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all the existing named variables for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>Named variables for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceNamedVariables>> Device_GetNamedVariablesByDeviceAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Searches for a specific named variable for a given device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="searchCriteria">The search criteria to use</param>
        /// <returns>Named variables for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceNamedVariables>> Device_SearchNamedVariablesAsync(int deviceId, string searchCriteria);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for a specific named variable for a given device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="searchCriteria">The search criteria to use</param>
        /// <returns>Named variables for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceNamedVariables>> Device_SearchNamedVariablesAsync(int deviceId, string searchCriteria, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all the existing protocols for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>Protocols for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Protocol>> Device_GetProtocolsByDeviceAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all the existing protocols for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>Protocols for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Protocol>> Device_GetProtocolsByDeviceAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all the existing roles for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>Roles for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Role>> Device_GetRolesByDeviceAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all the existing roles for a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>Roles for a device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Role>> Device_GetRolesByDeviceAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search for a device using regex and wildcard expressions
        /// </summary>
        /// <param name="search">The search criteria to use</param>
        /// <returns>Device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetDevicesMatchingSearchAsync(string search);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a device using regex and wildcard expressions
        /// </summary>
        /// <param name="search">The search criteria to use</param>
        /// <returns>Device found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetDevicesMatchingSearchAsync(string search, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a list off Devices that have a certain list of parameters
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetListOfDevicesThatHaveCertainParametersAsync(System.Collections.Generic.IEnumerable<string> listOfParameters);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list off Devices that have a certain list of parameters
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetListOfDevicesThatHaveCertainParametersAsync(System.Collections.Generic.IEnumerable<string> listOfParameters, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a device by uploading an Excel file
        /// </summary>
        /// <param name="deviceName">A name given to a device</param>
        /// <param name="hash">An identifying tag of the device</param>
        /// <param name="partNumber">An identifying part number for the device</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_CreateAsync(string deviceName, string hash, string partNumber, string comment, FileParameter file, bool? mergeDevice, bool? forceUpdate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a device by uploading an Excel file
        /// </summary>
        /// <param name="deviceName">A name given to a device</param>
        /// <param name="hash">An identifying tag of the device</param>
        /// <param name="partNumber">An identifying part number for the device</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_CreateAsync(string deviceName, string hash, string partNumber, string comment, FileParameter file, bool? mergeDevice, bool? forceUpdate, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Compares two devices taking into account the range
        /// <br/>and DefaultValue for each parameter
        /// </summary>
        /// <returns>A comparison was found between the two devices</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_CompareMultipleDevicesAsync(int? referenceDeviceId, System.Collections.Generic.IEnumerable<int> comparedDevices);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Compares two devices taking into account the range
        /// <br/>and DefaultValue for each parameter
        /// </summary>
        /// <returns>A comparison was found between the two devices</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_CompareMultipleDevicesAsync(int? referenceDeviceId, System.Collections.Generic.IEnumerable<int> comparedDevices, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update the information of a device
        /// </summary>
        /// <param name="deviceId">The identifier of a device</param>
        /// <param name="deviceName">The name of the device</param>
        /// <param name="hash">An identifying hash for the device</param>
        /// <param name="partNumber">The device part number</param>
        /// <returns>Device updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_UpdateByIdAsync(int deviceId, string deviceName, string hash, string partNumber, FileParameter file);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the information of a device
        /// </summary>
        /// <param name="deviceId">The identifier of a device</param>
        /// <param name="deviceName">The name of the device</param>
        /// <param name="hash">An identifying hash for the device</param>
        /// <param name="partNumber">The device part number</param>
        /// <returns>Device updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_UpdateByIdAsync(int deviceId, string deviceName, string hash, string partNumber, FileParameter file, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add a tag to a device
        /// </summary>
        /// <param name="deviceId">The identifier of a device</param>
        /// <param name="tagId">The identifier of  a tag</param>
        /// <returns>Device updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_AddTagToDeviceAsync(int? deviceId, int? tagId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a tag to a device
        /// </summary>
        /// <param name="deviceId">The identifier of a device</param>
        /// <param name="tagId">The identifier of  a tag</param>
        /// <returns>Device updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_AddTagToDeviceAsync(int? deviceId, int? tagId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a tag of a device
        /// </summary>
        /// <param name="deviceId">The identifier of a device</param>
        /// <param name="tagId">The identifier of  a tag</param>
        /// <returns>Device updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_DeleteTagToDeviceAsync(int? deviceId, int? tagId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a tag of a device
        /// </summary>
        /// <param name="deviceId">The identifier of a device</param>
        /// <param name="tagId">The identifier of  a tag</param>
        /// <returns>Device updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_DeleteTagToDeviceAsync(int? deviceId, int? tagId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get list of Devices having all tags in the list
        /// </summary>
        /// <param name="body">The list of tag ids</param>
        /// <returns>Get data successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetAllByTagsAsync(System.Collections.Generic.IEnumerable<int> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of Devices having all tags in the list
        /// </summary>
        /// <param name="body">The list of tag ids</param>
        /// <returns>Get data successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetAllByTagsAsync(System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a JSON list of Named Variables Devices associated with a specific list of tags.
        /// </summary>
        /// <returns>Returns the Named Variables Devices matching the specified tags</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetDevicesByCriteriaAsync(DeviceRequestDTO body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a JSON list of Named Variables Devices associated with a specific list of tags.
        /// </summary>
        /// <returns>Returns the Named Variables Devices matching the specified tags</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetDevicesByCriteriaAsync(DeviceRequestDTO body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a JSON list of Named Variables Devices associated with a specific list of tags.
        /// </summary>
        /// <returns>Returns the Named Variables Devices matching the specified tags</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedVariablesDevice>> Device_GetDevicesNamedVarsAsync(System.Collections.Generic.IEnumerable<int> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a JSON list of Named Variables Devices associated with a specific list of tags.
        /// </summary>
        /// <returns>Returns the Named Variables Devices matching the specified tags</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NamedVariablesDevice>> Device_GetDevicesNamedVarsAsync(System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a JSON list of Named Variables Devices associated with a specific list of tags.
        /// </summary>
        /// <returns>Returns the Named Variables Devices matching the specified tags</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VariablesReponse>> Device_GetCommonNamedVarsByDeviceAsync(System.Collections.Generic.IEnumerable<int> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a JSON list of Named Variables Devices associated with a specific list of tags.
        /// </summary>
        /// <returns>Returns the Named Variables Devices matching the specified tags</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VariablesReponse>> Device_GetCommonNamedVarsByDeviceAsync(System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpdateBulkDataFieldValidation>> Device_UpdateDevicesNamedVarsAsync(System.Collections.Generic.IEnumerable<NamedVariablesDeviceRequest> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpdateBulkDataFieldValidation>> Device_UpdateDevicesNamedVarsAsync(System.Collections.Generic.IEnumerable<NamedVariablesDeviceRequest> body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpdateBulkDataFieldValidation>> Device_UpdateDevicesParametersIndexAsync(System.Collections.Generic.IEnumerable<ParameterIndexValueUpdateRequest> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpdateBulkDataFieldValidation>> Device_UpdateDevicesParametersIndexAsync(System.Collections.Generic.IEnumerable<ParameterIndexValueUpdateRequest> body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a JSON list of DefaultValues Devices associated with a specific list of tags.
        /// </summary>
        /// <returns>Returns the Named Variables Devices matching the specified tags</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ParameterDefaultValueUpdate>> Device_GetDevicesDefaultValuesAsync(System.Collections.Generic.IEnumerable<int> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a JSON list of DefaultValues Devices associated with a specific list of tags.
        /// </summary>
        /// <returns>Returns the Named Variables Devices matching the specified tags</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ParameterDefaultValueUpdate>> Device_GetDevicesDefaultValuesAsync(System.Collections.Generic.IEnumerable<int> body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves a JSON list of Protocol Parameter Indexes Devices associated with a specific list of ids.
        /// </summary>
        /// <returns>Returns the Protocol Parameter Devices matching the specified ids</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ParameterIndexValueUpdate>> Device_GetDevicesIndexProtocolAsync(DeviceIndexRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a JSON list of Protocol Parameter Indexes Devices associated with a specific list of ids.
        /// </summary>
        /// <returns>Returns the Protocol Parameter Devices matching the specified ids</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ParameterIndexValueUpdate>> Device_GetDevicesIndexProtocolAsync(DeviceIndexRequest body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpdateBulkDataFieldValidation>> Device_UpdateDeviceParameterDefaultValueAsync(System.Collections.Generic.IEnumerable<ParameterDefaultValueUpdateRequest> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UpdateBulkDataFieldValidation>> Device_UpdateDeviceParameterDefaultValueAsync(System.Collections.Generic.IEnumerable<ParameterDefaultValueUpdateRequest> body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Exports device information into an Excel file
        /// </summary>
        /// <param name="deviceId">The identifier of a device</param>
        /// <returns>File exported successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<byte[]> Device_ExportDeviceContextAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Exports device information into an Excel file
        /// </summary>
        /// <param name="deviceId">The identifier of a device</param>
        /// <returns>File exported successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<byte[]> Device_ExportDeviceContextAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a device and all its related data
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>Device deleted successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_DeleteAsync(int deviceId, bool? deleteReference);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a device and all its related data
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <returns>Device deleted successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_DeleteAsync(int deviceId, bool? deleteReference, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Clone a device
        /// </summary>
        /// <param name="deviceId">The identifier of a device</param>
        /// <param name="deviceNewName">The name of the device</param>
        /// <returns>Device updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_CloneAsync(int deviceId, string deviceNewName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clone a device
        /// </summary>
        /// <param name="deviceId">The identifier of a device</param>
        /// <param name="deviceNewName">The name of the device</param>
        /// <returns>Device updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_CloneAsync(int deviceId, string deviceNewName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="deviceName">A name given to a device</param>
        /// <param name="hash">An identifying tag of the device</param>
        /// <param name="partNumber">An identifying part number for the device</param>
        /// <param name="lastModified">Timestamp of the last change made to the device</param>
        /// <param name="haveProjectFile">Have CANopen project</param>
        /// <returns>Device updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_UpdateAsync(int? deviceId, string deviceName, string hash, string partNumber, System.DateTimeOffset? lastModified, bool? haveProjectFile, FileParameter projectFile, string projectName, bool? haveCANopen, bool? haveSSPP, bool? haveIOLink, string comment, int? referenceDeviceId, string deviceDropDownName, System.Collections.Generic.IEnumerable<TagResponse> deviceTags, FileParameter file, bool? mergeDevice, bool? forceUpdate, string edmNumber);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a device
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="deviceName">A name given to a device</param>
        /// <param name="hash">An identifying tag of the device</param>
        /// <param name="partNumber">An identifying part number for the device</param>
        /// <param name="lastModified">Timestamp of the last change made to the device</param>
        /// <param name="haveProjectFile">Have CANopen project</param>
        /// <returns>Device updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_UpdateAsync(int? deviceId, string deviceName, string hash, string partNumber, System.DateTimeOffset? lastModified, bool? haveProjectFile, FileParameter projectFile, string projectName, bool? haveCANopen, bool? haveSSPP, bool? haveIOLink, string comment, int? referenceDeviceId, string deviceDropDownName, System.Collections.Generic.IEnumerable<TagResponse> deviceTags, FileParameter file, bool? mergeDevice, bool? forceUpdate, string edmNumber, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_HashDeviceAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_HashDeviceAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a device
        /// </summary>
        /// <param name="deviceId">The device id to export CANopen Parameter</param>
        /// <param name="role">The roleId of rule to be exported in CSV</param>
        /// <returns>Device exported successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_ExportCSVAsync(int deviceId, int? role);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a device
        /// </summary>
        /// <param name="deviceId">The device id to export CANopen Parameter</param>
        /// <param name="role">The roleId of rule to be exported in CSV</param>
        /// <returns>Device exported successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_ExportCSVAsync(int deviceId, int? role, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_ExportEmotasCANopenProjectAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_ExportEmotasCANopenProjectAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_DownloadEmotasCANopenProjectAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_DownloadEmotasCANopenProjectAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets an ini file with compare result of two devices
        /// </summary>
        /// <returns>A comparison was found between the two devices</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_DownloadCompareDevicesIniAsync(int? referenceDeviceId, int? comparedDevice, int? protocolId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets an ini file with compare result of two devices
        /// </summary>
        /// <returns>A comparison was found between the two devices</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_DownloadCompareDevicesIniAsync(int? referenceDeviceId, int? comparedDevice, int? protocolId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Emotas project to the Device
        /// </summary>
        /// <param name="deviceId">The device id to add the project</param>
        /// <param name="forceUpdate">Set a true to force a update</param>
        /// <returns>Project added successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_AddProjectToDeviceAsync(int deviceId, bool? forceUpdate, FileParameter projectFile);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Emotas project to the Device
        /// </summary>
        /// <param name="deviceId">The device id to add the project</param>
        /// <param name="forceUpdate">Set a true to force a update</param>
        /// <returns>Project added successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Device_AddProjectToDeviceAsync(int deviceId, bool? forceUpdate, FileParameter projectFile, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a list of devices that use a specific parameter Id
        /// </summary>
        /// <param name="parameterId">The paramter id to get a list of parameters</param>
        /// <returns>List with devices</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetDeviceByParameterIdAsync(int? parameterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of devices that use a specific parameter Id
        /// </summary>
        /// <param name="parameterId">The paramter id to get a list of parameters</param>
        /// <returns>List with devices</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetDeviceByParameterIdAsync(int? parameterId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the last modified devices
        /// </summary>
        /// <param name="count">Count of results</param>
        /// <returns>List with devices</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetLastModifiedDevicesAsync(int? count);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the last modified devices
        /// </summary>
        /// <param name="count">Count of results</param>
        /// <returns>List with devices</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetLastModifiedDevicesAsync(int? count, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the only a list of device id and device name
        /// </summary>
        /// <returns>List with devices</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponseShort>> Device_GetDevicesShortAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the only a list of device id and device name
        /// </summary>
        /// <returns>List with devices</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponseShort>> Device_GetDevicesShortAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetDevicesByLazyParamAsync(DeviceLazyParamsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceResponse>> Device_GetDevicesByLazyParamAsync(DeviceLazyParamsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> Device_GetDevicesByLazyParamCountAsync(DeviceLazyParamsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> Device_GetDevicesByLazyParamCountAsync(DeviceLazyParamsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeviceResponse> Device_GetDeviceByHashAsync(string hashValue);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeviceResponse> Device_GetDeviceByHashAsync(string hashValue, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all device parameters from a specific device
        /// </summary>
        /// <returns>Get all DeviceParameters</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceParameterResponse>> DeviceParameter_GetAllFromDeviceIdAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all device parameters from a specific device
        /// </summary>
        /// <returns>Get all DeviceParameters</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceParameterResponse>> DeviceParameter_GetAllFromDeviceIdAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get parameter information
        /// </summary>
        /// <returns>Get all paramter information</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceParameterResponse>> DeviceParameter_GetAllFromParameterIdAsync(int parameterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get parameter information
        /// </summary>
        /// <returns>Get all paramter information</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeviceParameterResponse>> DeviceParameter_GetAllFromParameterIdAsync(int parameterId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new DeviceParameter
        /// </summary>
        /// <param name="body">The definition of the DeviceParameter</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeviceParameter_CreateNewDeviceParameterAsync(ParameterGeneralInformationUpdate body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new DeviceParameter
        /// </summary>
        /// <param name="body">The definition of the DeviceParameter</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeviceParameter_CreateNewDeviceParameterAsync(ParameterGeneralInformationUpdate body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search for a parameter by name using wildcards
        /// </summary>
        /// <param name="parameterName">The name of the parameter to search</param>
        /// <returns>The parameter exists</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParameterResponse> Parameter_GetParameterByNameAsync(string parameterName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a parameter by name using wildcards
        /// </summary>
        /// <param name="parameterName">The name of the parameter to search</param>
        /// <returns>The parameter exists</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParameterResponse> Parameter_GetParameterByNameAsync(string parameterName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves information about a specific parameter for a given device and protocol
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="protocolName">The name of the protocol</param>
        /// <param name="parameterName">The name of the parameter</param>
        /// <returns>The parameter exists</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProtocolParameterResponse> Parameter_GetParameterInformationAsync(int deviceId, string protocolName, string parameterName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves information about a specific parameter for a given device and protocol
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="protocolName">The name of the protocol</param>
        /// <param name="parameterName">The name of the parameter</param>
        /// <returns>The parameter exists</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProtocolParameterResponse> Parameter_GetParameterInformationAsync(int deviceId, string protocolName, string parameterName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves information about all parameter for a given device and protocol, using a query string for specifying roles
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="protocolName">The name of the protocol</param>
        /// <param name="query">A query to express the access level for the roles you desire</param>
        /// <returns>The device has information about its parameters</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolParameterResponse>> Parameter_RegexAsync(int deviceId, string protocolName, string query);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves information about all parameter for a given device and protocol, using a query string for specifying roles
        /// </summary>
        /// <param name="deviceId">A device identifier</param>
        /// <param name="protocolName">The name of the protocol</param>
        /// <param name="query">A query to express the access level for the roles you desire</param>
        /// <returns>The device has information about its parameters</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolParameterResponse>> Parameter_RegexAsync(int deviceId, string protocolName, string query, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves information about all parameter that exist on the database
        /// </summary>
        /// <returns>The device has information about its parameters</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Parameter>> Parameter_GetAllAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves information about all parameter that exist on the database
        /// </summary>
        /// <returns>The device has information about its parameters</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Parameter>> Parameter_GetAllAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves information about all parameter associated to a certain device
        /// </summary>
        /// <returns>The device has information about its parameters</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Parameter_GetParameterToAddToDeviceAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves information about all parameter associated to a certain device
        /// </summary>
        /// <returns>The device has information about its parameters</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Parameter_GetParameterToAddToDeviceAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a list with all units present on database
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Parameter>> Parameter_GetParameterUnitListAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list with all units present on database
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Parameter>> Parameter_GetParameterUnitListAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a list with all components present on database
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Parameter>> Parameter_GetParameterComponentsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list with all components present on database
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Parameter>> Parameter_GetParameterComponentsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new parameter
        /// </summary>
        /// <param name="body">The definition of the parameter</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Parameter_CreateParameterAsync(Parameter body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new parameter
        /// </summary>
        /// <param name="body">The definition of the parameter</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Parameter_CreateParameterAsync(Parameter body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a parameter
        /// </summary>
        /// <param name="body">The definition of the parameter</param>
        /// <returns>Parameter updated</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Parameter_UpdateParameterAsync(Parameter body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a parameter
        /// </summary>
        /// <param name="body">The definition of the parameter</param>
        /// <returns>Parameter updated</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Parameter_UpdateParameterAsync(Parameter body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DataType_DeleteParameterAsync(int parameterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DataType_DeleteParameterAsync(int parameterId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DataType_ReactivateParameterAsync(int parameterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DataType_ReactivateParameterAsync(int parameterId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new named variable
        /// </summary>
        /// <param name="name">The name of the named variable</param>
        /// <param name="value">The value of the named variable</param>
        /// <param name="deviceId">The device to which the named variable should be bind to</param>
        /// <param name="requirement">The requirement for the ParameterTool.Model.ParameterValue instance</param>
        /// <param name="datatypeId">The datatypeId to which the name variable should be bind to</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ParameterValue_CreateNamedVariableAsync(string name, string value, int deviceId, string requirement, int datatypeId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new named variable
        /// </summary>
        /// <param name="name">The name of the named variable</param>
        /// <param name="value">The value of the named variable</param>
        /// <param name="deviceId">The device to which the named variable should be bind to</param>
        /// <param name="requirement">The requirement for the ParameterTool.Model.ParameterValue instance</param>
        /// <param name="datatypeId">The datatypeId to which the name variable should be bind to</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ParameterValue_CreateNamedVariableAsync(string name, string value, int deviceId, string requirement, int datatypeId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a named variable
        /// </summary>
        /// <param name="name">The new name of the named variable</param>
        /// <param name="value">The value of the new named variable</param>
        /// <param name="datatypeId">The datatypeId to which the name variable should be bind to</param>
        /// <param name="body">The ParameterValue instance to change</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ParameterValue_UpdateNamedVariableAsync(string name, string value, string requirement, int datatypeId, ParameterValue body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a named variable
        /// </summary>
        /// <param name="name">The new name of the named variable</param>
        /// <param name="value">The value of the new named variable</param>
        /// <param name="datatypeId">The datatypeId to which the name variable should be bind to</param>
        /// <param name="body">The ParameterValue instance to change</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ParameterValue_UpdateNamedVariableAsync(string name, string value, string requirement, int datatypeId, ParameterValue body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ParameterValue_DeleteNamedVariableAsync(ParameterValue body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ParameterValue_DeleteNamedVariableAsync(ParameterValue body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search for a protocol by name
        /// </summary>
        /// <param name="protocolName">The name of the protocol to search</param>
        /// <returns>Protocol found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolResponse>> Protocol_GetProtocolByNameAsync(string protocolName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a protocol by name
        /// </summary>
        /// <param name="protocolName">The name of the protocol to search</param>
        /// <returns>Protocol found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolResponse>> Protocol_GetProtocolByNameAsync(string protocolName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves all existing protocols in the database
        /// </summary>
        /// <returns>Protocols found in the database</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolResponse>> Protocol_GetAllProtocolsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves all existing protocols in the database
        /// </summary>
        /// <returns>Protocols found in the database</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolResponse>> Protocol_GetAllProtocolsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new protocol
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Protocol_CreateProtocolAsync(string protocolName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new protocol
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Protocol_CreateProtocolAsync(string protocolName, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Protocol_UpdateProtocolAsync(ProtocolResponse body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Protocol_UpdateProtocolAsync(ProtocolResponse body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Protocol_DeleteProtocolAsync(int protocolId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Protocol_DeleteProtocolAsync(int protocolId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolResponse>> Protocol_GetByDeviceIdAsync(int deviceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolResponse>> Protocol_GetByDeviceIdAsync(int deviceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new protocol reference to a parameter
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProtocolParameter_CreateProtocolReferenceForParameterAsync(ProtocolParameterNewReference body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new protocol reference to a parameter
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProtocolParameter_CreateProtocolReferenceForParameterAsync(ProtocolParameterNewReference body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Return a list of protocol parameters with a given index and sorted by subindx ascending
        /// </summary>
        /// <returns>List returned with success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProtocolParameterNewReference> ProtocolParameter_GetProtocolSubIndexsAsync(int? deviceId, int? protocolId, int? parameterIndex);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return a list of protocol parameters with a given index and sorted by subindx ascending
        /// </summary>
        /// <returns>List returned with success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProtocolParameterNewReference> ProtocolParameter_GetProtocolSubIndexsAsync(int? deviceId, int? protocolId, int? parameterIndex, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a protocol reference for a parameter
        /// </summary>
        /// <returns>Protocol reference deleted</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProtocolParameter_DeleteProtocolReferenceForParameterAsync(int? deviceId, int? protocolId, int? parameterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a protocol reference for a parameter
        /// </summary>
        /// <returns>Protocol reference deleted</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProtocolParameter_DeleteProtocolReferenceForParameterAsync(int? deviceId, int? protocolId, int? parameterId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// FRONTEND SUPPORT: Updates protocol information regarding a parameter
        /// </summary>
        /// <param name="body">The definition of a protocol for a parameter</param>
        /// <returns>Protocol information for parameter updates</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProtocolParameter_UpdateParameterProtocolInformationAsync(int? parameterId, int? deviceId, int? protocolId, ProtocolParameterUpdate body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// FRONTEND SUPPORT: Updates protocol information regarding a parameter
        /// </summary>
        /// <param name="body">The definition of a protocol for a parameter</param>
        /// <returns>Protocol information for parameter updates</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProtocolParameter_UpdateParameterProtocolInformationAsync(int? parameterId, int? deviceId, int? protocolId, ProtocolParameterUpdate body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// FRONTEND SUPPORT: used for updating general information about a parameter, agnostic to a protocol
        /// </summary>
        /// <returns>Parameter was updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProtocolParameter_UpdateGeneralInformationAsync(ParameterGeneralInformationUpdate body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// FRONTEND SUPPORT: used for updating general information about a parameter, agnostic to a protocol
        /// </summary>
        /// <returns>Parameter was updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProtocolParameter_UpdateGeneralInformationAsync(ParameterGeneralInformationUpdate body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves all existing roles in the database
        /// </summary>
        /// <returns>Database contains roles</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleResponse>> Role_GetAllRolesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves all existing roles in the database
        /// </summary>
        /// <returns>Database contains roles</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleResponse>> Role_GetAllRolesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search for a specific role by name using wildcards
        /// </summary>
        /// <param name="roleName">The name of the role to search</param>
        /// <returns>Roles found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleResponse>> Role_GetRoleByNameAsync(string roleName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for a specific role by name using wildcards
        /// </summary>
        /// <param name="roleName">The name of the role to search</param>
        /// <returns>Roles found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleResponse>> Role_GetRoleByNameAsync(string roleName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new role
        /// </summary>
        /// <param name="roleName">The name of the role to create</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Role_CreateRoleAsync(string roleName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new role
        /// </summary>
        /// <param name="roleName">The name of the role to create</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Role_CreateRoleAsync(string roleName, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Role_UpdateRoleAsync(RoleResponse body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Role_UpdateRoleAsync(RoleResponse body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Role_DeleteRoleAsync(int roleId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Role_DeleteRoleAsync(int roleId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves all existing devices in the database
        /// </summary>
        /// <returns>Tags found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TagResponse>> Tag_GetDevicesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves all existing devices in the database
        /// </summary>
        /// <returns>Tags found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TagResponse>> Tag_GetDevicesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retrieves Device information for the given device
        /// </summary>
        /// <param name="tagId">A tag identifier</param>
        /// <returns>Tag found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TagResponse> Tag_GetDeviceByIdAsync(int tagId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves Device information for the given device
        /// </summary>
        /// <param name="tagId">A tag identifier</param>
        /// <returns>Tag found</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TagResponse> Tag_GetDeviceByIdAsync(int tagId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a tag
        /// </summary>
        /// <param name="body">Represents the tag to create</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Tag_CreateAsync(TagResponse body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a tag
        /// </summary>
        /// <param name="body">Represents the tag to create</param>
        /// <returns>Success</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Tag_CreateAsync(TagResponse body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a device
        /// </summary>
        /// <param name="body">The tag to update</param>
        /// <returns>Tag updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Tag_UpdateAsync(TagResponse body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a device
        /// </summary>
        /// <param name="body">The tag to update</param>
        /// <returns>Tag updated successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Tag_UpdateAsync(TagResponse body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a device and all its related data
        /// </summary>
        /// <param name="tagId">A tag identifier</param>
        /// <returns>Tag deleted successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Tag_DeleteAsync(int tagId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a device and all its related data
        /// </summary>
        /// <param name="tagId">A tag identifier</param>
        /// <returns>Tag deleted successfully</returns>
        /// <exception cref="ParameterToolClientApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Tag_DeleteAsync(int tagId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccessTypeClass
    {

        _0 = 0,

        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataTypeReponse
    {
        [Newtonsoft.Json.JsonProperty("datatypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DatatypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DefaultValueDevice
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValueVariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValueVariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("isToBeUpdated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsToBeUpdated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DefaultValueDeviceRequest
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceFilters
    {
        [Newtonsoft.Json.JsonProperty("deviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterValue DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterValue Hash { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterValue LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterValue PartNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterValue Global { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceIndexRequest
    {
        [Newtonsoft.Json.JsonProperty("deviceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> DeviceIds { get; set; }

        [Newtonsoft.Json.JsonProperty("protocolId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProtocolId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceLazyParamsRequest
    {
        [Newtonsoft.Json.JsonProperty("first", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int First { get; set; }

        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rows { get; set; }

        [Newtonsoft.Json.JsonProperty("sortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SortOrder { get; set; }

        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceFilters Filters { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceNamedVariables
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("requirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Requirement { get; set; }

        [Newtonsoft.Json.JsonProperty("valueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ValueId { get; set; }

        [Newtonsoft.Json.JsonProperty("datatypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DatatypeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceParameterResponse
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceTag { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.Always)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterName { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultValueId { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValueName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValueName { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("datatypeId", Required = Newtonsoft.Json.Required.Always)]
        public int DatatypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("datatypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatatypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
        public int Length { get; set; }

        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.Always)]
        public double Scale { get; set; }

        [Newtonsoft.Json.JsonProperty("resetBehavior", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ResetBehavior { get; set; }

        [Newtonsoft.Json.JsonProperty("storageLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageLocation { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Range> AllowedValues { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceRequestDTO
    {
        [Newtonsoft.Json.JsonProperty("tagIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> TagIds { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("protocolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProtocolId { get; set; }

    }

    /// <summary>
    /// Gathers information about a device's attributes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceResponse
    {
        /// <summary>
        /// A device identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

        /// <summary>
        /// A name given to a device
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceName { get; set; }

        /// <summary>
        /// An identifying tag of the device
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hash { get; set; }

        /// <summary>
        /// An identifying part number for the device
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Timestamp of the last change made to the device
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModified { get; set; }

        /// <summary>
        /// Have CANopen project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("haveProjectFile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HaveProjectFile { get; set; }

        [Newtonsoft.Json.JsonProperty("projectFile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] ProjectFile { get; set; }

        [Newtonsoft.Json.JsonProperty("projectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("haveCANopen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HaveCANopen { get; set; }

        [Newtonsoft.Json.JsonProperty("haveSSPP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HaveSSPP { get; set; }

        [Newtonsoft.Json.JsonProperty("haveIOLink", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HaveIOLink { get; set; }

        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferenceDeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceDropDownName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceDropDownName { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceTags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TagResponse> DeviceTags { get; set; }

        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] File { get; set; }

        [Newtonsoft.Json.JsonProperty("mergeDevice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MergeDevice { get; set; }

        [Newtonsoft.Json.JsonProperty("forceUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForceUpdate { get; set; }

        [Newtonsoft.Json.JsonProperty("edmNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdmNumber { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeviceResponseShort
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceIdAndName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceIdAndName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterValue
    {
        [Newtonsoft.Json.JsonProperty("matchMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MatchMode { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndexValueDevice
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("protocolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProtocolId { get; set; }

        [Newtonsoft.Json.JsonProperty("protocolName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProtocolName { get; set; }

        [Newtonsoft.Json.JsonProperty("indexValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IndexValue { get; set; }

        [Newtonsoft.Json.JsonProperty("subIndexValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubIndexValue { get; set; }

        [Newtonsoft.Json.JsonProperty("isToBeUpdated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsToBeUpdated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndexValueDeviceRequest
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("protocolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProtocolId { get; set; }

        [Newtonsoft.Json.JsonProperty("indexValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IndexValue { get; set; }

        [Newtonsoft.Json.JsonProperty("subIndexValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubIndexValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MapableClass
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NamedVariablesDevice
    {
        [Newtonsoft.Json.JsonProperty("namedVariableId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NamedVariableId { get; set; }

        [Newtonsoft.Json.JsonProperty("namedVariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedVariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("devices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VariablesDevice> Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("newValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NamedVariablesDeviceRequest
    {
        [Newtonsoft.Json.JsonProperty("namedVariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedVariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("devices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VariablesDeviceRequest> Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("newValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ObjectCodeClass
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter
    {
        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ParameterName { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("storageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageType { get; set; }

        [Newtonsoft.Json.JsonProperty("platformRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Component { get; set; }

        [Newtonsoft.Json.JsonProperty("isObsolete", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsObsolete { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterDefaultValueUpdate
    {
        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterName { get; set; }

        [Newtonsoft.Json.JsonProperty("devices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DefaultValueDevice> Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("newValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewValue { get; set; }

        [Newtonsoft.Json.JsonProperty("newValueVariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewValueVariableName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterDefaultValueUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("devices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DefaultValueDeviceRequest> Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("newValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewValue { get; set; }

        [Newtonsoft.Json.JsonProperty("isVariableValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsVariableValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterDetailsResponse
    {
        [Newtonsoft.Json.JsonProperty("allowedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Range> AllowedValues { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceDataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceDataType { get; set; }

        [Newtonsoft.Json.JsonProperty("arrayCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ArrayCount { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DeviceScale { get; set; }

        /// <summary>
        /// Stores the name and value of a specific range or default value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueNamePair DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("storageLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageLocation { get; set; }

        [Newtonsoft.Json.JsonProperty("resetBehavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResetBehavior { get; set; }

        [Newtonsoft.Json.JsonProperty("protocols", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProtocolInformation> Protocols { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterName { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Component { get; set; }

        [Newtonsoft.Json.JsonProperty("storageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageType { get; set; }

        [Newtonsoft.Json.JsonProperty("platformRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Category { get; set; }

        [Newtonsoft.Json.JsonProperty("categoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterDetailsResponseFront
    {
        [Newtonsoft.Json.JsonProperty("allowedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Range> AllowedValues { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceDataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceDataType { get; set; }

        [Newtonsoft.Json.JsonProperty("arrayCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ArrayCount { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceScale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DeviceScale { get; set; }

        /// <summary>
        /// Stores the name and value of a specific range or default value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueNamePair DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("storageLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageLocation { get; set; }

        [Newtonsoft.Json.JsonProperty("resetBehavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResetBehavior { get; set; }

        [Newtonsoft.Json.JsonProperty("protocols", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProtocolInformation> Protocols { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterName { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Component { get; set; }

        [Newtonsoft.Json.JsonProperty("storageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageType { get; set; }

        [Newtonsoft.Json.JsonProperty("platformRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Category { get; set; }

        [Newtonsoft.Json.JsonProperty("categoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryName { get; set; }

        [Newtonsoft.Json.JsonProperty("sspp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sspp { get; set; }

        [Newtonsoft.Json.JsonProperty("sspP_Index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SspP_Index { get; set; }

        [Newtonsoft.Json.JsonProperty("sspP_ProtocolLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SspP_ProtocolLength { get; set; }

        [Newtonsoft.Json.JsonProperty("sspP_Role_RnD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SspP_Role_RnD { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaNopen { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_Index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaNopen_Index { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_SubIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaNopen_SubIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_ProtocolParameterScale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CaNopen_ProtocolParameterScale { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_Identifies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CaNopen_Identifies { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_IsLocked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CaNopen_IsLocked { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_IsWriteable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CaNopen_IsWriteable { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_Mappable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaNopen_Mappable { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_StorageClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaNopen_StorageClass { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_ProtocolLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CaNopen_ProtocolLength { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_DefaultRelativeToNodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CaNopen_DefaultRelativeToNodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_ObjectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaNopen_ObjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_ObjectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaNopen_ObjectCode { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_EdsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaNopen_EdsName { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_Role_RnD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaNopen_Role_RnD { get; set; }

        [Newtonsoft.Json.JsonProperty("caNopen_Role_Customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaNopen_Role_Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("ioLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IoLink { get; set; }

        [Newtonsoft.Json.JsonProperty("ioLink_Index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IoLink_Index { get; set; }

        [Newtonsoft.Json.JsonProperty("ioLink_SubIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IoLink_SubIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("ioLink_SubIndexSupport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IoLink_SubIndexSupport { get; set; }

        [Newtonsoft.Json.JsonProperty("ioLink_IsWriteable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IoLink_IsWriteable { get; set; }

        [Newtonsoft.Json.JsonProperty("ioLink_DataStorage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IoLink_DataStorage { get; set; }

        [Newtonsoft.Json.JsonProperty("ioLink_ProtocolLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IoLink_ProtocolLength { get; set; }

        [Newtonsoft.Json.JsonProperty("ioLink_Role_Customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IoLink_Role_Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("analog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Analog { get; set; }

        [Newtonsoft.Json.JsonProperty("analog_Index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Analog_Index { get; set; }

        [Newtonsoft.Json.JsonProperty("analog_SubIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Analog_SubIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("analog_ProtocolLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Analog_ProtocolLength { get; set; }

        [Newtonsoft.Json.JsonProperty("analog_Role_RnD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Analog_Role_RnD { get; set; }

        [Newtonsoft.Json.JsonProperty("analog_AccessType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Analog_AccessType { get; set; }

    }

    /// <summary>
    /// Defines a type for updating protocol agnostic information of a parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterGeneralInformationUpdate
    {
        /// <summary>
        /// Stores the name and value of a specific range or default value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueNamePair DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Range> AllowedValues { get; set; }

        [Newtonsoft.Json.JsonProperty("oldAllowedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Range> OldAllowedValues { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datatype { get; set; }

        [Newtonsoft.Json.JsonProperty("storageLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageLocation { get; set; }

        [Newtonsoft.Json.JsonProperty("resetBehavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResetBehavior { get; set; }

        [Newtonsoft.Json.JsonProperty("arrayCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ArrayCount { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Category { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterIndexValueUpdate
    {
        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterName { get; set; }

        [Newtonsoft.Json.JsonProperty("devices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IndexValueDevice> Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("newIndexValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NewIndexValue { get; set; }

        [Newtonsoft.Json.JsonProperty("newSubIndexValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NewSubIndexValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterIndexValueUpdateRequest
    {
        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("devices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IndexValueDeviceRequest> Devices { get; set; }

        [Newtonsoft.Json.JsonProperty("newIndexValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NewIndexValue { get; set; }

        [Newtonsoft.Json.JsonProperty("newSubIndexValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NewSubIndexValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterResponse
    {
        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterName { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("storageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageType { get; set; }

        [Newtonsoft.Json.JsonProperty("platformRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Component { get; set; }

        [Newtonsoft.Json.JsonProperty("isObsolete", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsObsolete { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterValue
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("valueId", Required = Newtonsoft.Json.Required.Always)]
        public int ValueId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("requirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Requirement { get; set; }

        [Newtonsoft.Json.JsonProperty("datatypeId", Required = Newtonsoft.Json.Required.Always)]
        public int DatatypeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Protocol
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("protocolId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProtocolId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProtocolInformation
    {
        [Newtonsoft.Json.JsonProperty("protocolName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProtocolName { get; set; }

        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        [Newtonsoft.Json.JsonProperty("subIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("identifies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Identifies { get; set; }

        [Newtonsoft.Json.JsonProperty("subIndexSupport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SubIndexSupport { get; set; }

        [Newtonsoft.Json.JsonProperty("dataStorage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DataStorage { get; set; }

        [Newtonsoft.Json.JsonProperty("isMappable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsMappable { get; set; }

        [Newtonsoft.Json.JsonProperty("storageClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StorageClass { get; set; }

        [Newtonsoft.Json.JsonProperty("varName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VarName { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("objectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ObjectCodeClass? ObjectCode { get; set; }

        [Newtonsoft.Json.JsonProperty("mappable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MapableClass? Mappable { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultRelativeNodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultRelativeNodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Scale { get; set; }

        [Newtonsoft.Json.JsonProperty("arrayCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ArrayCount { get; set; }

        [Newtonsoft.Json.JsonProperty("edsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdsName { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("objectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("offSet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OffSet { get; set; }

        [Newtonsoft.Json.JsonProperty("bitLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitLength { get; set; }

        [Newtonsoft.Json.JsonProperty("changeOffSetOrBitLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ChangeOffSetOrBitLength { get; set; }

        [Newtonsoft.Json.JsonProperty("accessType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccessTypeClass? AccessType { get; set; }

        [Newtonsoft.Json.JsonProperty("accesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RolesAccesses> Accesses { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProtocolParameter
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("parameterId", Required = Newtonsoft.Json.Required.Always)]
        public int ParameterId { get; set; }

        [Newtonsoft.Json.JsonProperty("protocolId", Required = Newtonsoft.Json.Required.Always)]
        public int ProtocolId { get; set; }

        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Scale { get; set; }

        [Newtonsoft.Json.JsonProperty("datatypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DatatypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("arrayCount", Required = Newtonsoft.Json.Required.Always)]
        public int ArrayCount { get; set; }

        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        [Newtonsoft.Json.JsonProperty("identifies", Required = Newtonsoft.Json.Required.Always)]
        public bool Identifies { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("offSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OffSet { get; set; }

        [Newtonsoft.Json.JsonProperty("bitLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BitLength { get; set; }

        [Newtonsoft.Json.JsonProperty("changeOffSetOrBitLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ChangeOffSetOrBitLength { get; set; }

    }

    /// <summary>
    /// Specifies a new protocol reference for a parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProtocolParameterNewReference
    {
        /// <summary>
        /// A new ProtocolParameter object which defines a new protocol reference for a parameter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocolParameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProtocolParameter ProtocolParameter { get; set; }

        /// <summary>
        /// The access levels defined for each role in the protocol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RolesAccesses> Accesses { get; set; }

        [Newtonsoft.Json.JsonProperty("dataStorage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DataStorage { get; set; }

        [Newtonsoft.Json.JsonProperty("subIndexSupport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SubIndexSupport { get; set; }

        [Newtonsoft.Json.JsonProperty("storageClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StorageClass { get; set; }

        [Newtonsoft.Json.JsonProperty("Varname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Varname { get; set; }

        [Newtonsoft.Json.JsonProperty("ObjectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObjectCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Mappable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Mappable { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultRelativeNodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultRelativeNodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("EdsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdsName { get; set; }

        [Newtonsoft.Json.JsonProperty("ObjectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AccessType { get; set; }

        [Newtonsoft.Json.JsonProperty("SubIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubIndex { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProtocolParameterResponse
    {
        [Newtonsoft.Json.JsonProperty("parameterName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParameterName { get; set; }

        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        [Newtonsoft.Json.JsonProperty("subIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scale { get; set; }

        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datatype { get; set; }

        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        [Newtonsoft.Json.JsonProperty("identifies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Identifies { get; set; }

        [Newtonsoft.Json.JsonProperty("dataStorage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DataStorage { get; set; }

        [Newtonsoft.Json.JsonProperty("varName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VarName { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultRelativeNodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultRelativeNodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("objectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ObjectCodeClass? ObjectCode { get; set; }

        [Newtonsoft.Json.JsonProperty("mapable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MapableClass? Mapable { get; set; }

        [Newtonsoft.Json.JsonProperty("storageClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageClass? StorageClass { get; set; }

        [Newtonsoft.Json.JsonProperty("subIndexSupport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SubIndexSupport { get; set; }

        [Newtonsoft.Json.JsonProperty("accesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RolesAccesses> Accesses { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("platformRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformRequirement { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceRequirement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceRequirement { get; set; }

        /// <summary>
        /// Stores the name and value of a specific range or default value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueNamePair DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("allowedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Range> AllowedValues { get; set; }

        [Newtonsoft.Json.JsonProperty("objectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("accessType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccessTypeClass AccessType { get; set; }

    }

    /// <summary>
    /// Defines a type for updating protocol specific information of a protocol
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProtocolParameterUpdate
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }

        [Newtonsoft.Json.JsonProperty("subIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Scale { get; set; }

        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        [Newtonsoft.Json.JsonProperty("identifies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Identifies { get; set; }

        [Newtonsoft.Json.JsonProperty("dataStorage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DataStorage { get; set; }

        [Newtonsoft.Json.JsonProperty("subIndexSupport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SubIndexSupport { get; set; }

        [Newtonsoft.Json.JsonProperty("storageClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StorageClass { get; set; }

        [Newtonsoft.Json.JsonProperty("VarName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VarName { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("ObjectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObjectCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Mappable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Mappable { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultRelativeNodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultRelativeNodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("EdsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdsName { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ObjectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectName { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AccessType { get; set; }

        [Newtonsoft.Json.JsonProperty("OffSet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OffSet { get; set; }

        [Newtonsoft.Json.JsonProperty("BitLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitLength { get; set; }

        [Newtonsoft.Json.JsonProperty("ChangeOffSetOrBitLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ChangeOffSetOrBitLength { get; set; }

        [Newtonsoft.Json.JsonProperty("accesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RolesAccesses> Accesses { get; set; }

    }

    /// <summary>
    /// Encapsulates the information for a protocol
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProtocolResponse
    {
        /// <summary>
        /// The name of the protocol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique identifier of the protocol
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocolId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProtocolId { get; set; }

    }

    /// <summary>
    /// Specifies a range for a specific ValueRange
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Range
    {
        /// <summary>
        /// The range description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name and value of the Min value of the range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueNamePair Min { get; set; }

        /// <summary>
        /// The name and value of the Max value of the range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValueNamePair Max { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Role
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RoleId { get; set; }

    }

    /// <summary>
    /// Represents the authorization role for a parameter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleResponse
    {
        /// <summary>
        /// The name of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique identifier of the role
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RoleId { get; set; }

    }

    /// <summary>
    /// Stores the access level for a specific role
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RolesAccesses
    {
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        [Newtonsoft.Json.JsonProperty("access", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Access { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StorageClass
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagResponse
    {
        [Newtonsoft.Json.JsonProperty("tagId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TagId { get; set; }

        [Newtonsoft.Json.JsonProperty("tagName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TagName { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBulkDataFieldValidation
    {
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UpdateBulkDataValidation> FieldValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBulkDataValidation
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("foundedIssues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FoundedIssues { get; set; }

    }

    /// <summary>
    /// Stores the name and value of a specific range or default value
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValueNamePair
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableDeviceResponse
    {
        [Newtonsoft.Json.JsonProperty("variableId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int VariableId { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("variableValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VariableValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariablesDevice
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceName { get; set; }

        [Newtonsoft.Json.JsonProperty("namedVariableValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamedVariableValue { get; set; }

        [Newtonsoft.Json.JsonProperty("isToBeUpdated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsToBeUpdated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariablesDeviceRequest
    {
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DeviceId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariablesReponse
    {
        [Newtonsoft.Json.JsonProperty("variableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("variableDeviceValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VariableDeviceResponse> VariableDeviceValues { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterToolClientApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ParameterToolClientApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParameterToolClientApiException<TResult> : ParameterToolClientApiException
    {
        public TResult Result { get; private set; }

        public ParameterToolClientApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625